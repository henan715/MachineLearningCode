# coding:utf-8
from numpy import *
import matplotlib.pyplot as plt


def loadSimpleData():
    """
    初始的测试数据
    :return:
    """
    dataMat = matrix([[1.0, 2.1], [2.0, 1.1], [1.3, 1.1], [1.0, 1.0], [2.0, 1.0]])
    classLabels = [1.0, 1.0, -1.0, -1.0, 1.0]
    return dataMat, classLabels


def loadDataSet(fileName):  # general function to parse tab -delimited floats
    numFeat = len(open(fileName).readline().split('\t'))  # get number of fields
    dataMat = [];
    labelMat = []
    fr = open(fileName)
    for line in fr.readlines():
        lineArr = []
        curLine = line.strip().split('\t')
        for i in range(numFeat - 1):
            lineArr.append(float(curLine[i]))
        dataMat.append(lineArr)
        labelMat.append(float(curLine[-1]))
    return dataMat, labelMat


def plotRawData():
    """
    绘制原始数据信息图,即书中的图7-2
    :return:
    """
    dataMat, classLabels = loadSimpleData()
    xcord0 = []
    ycord0 = []
    xcord1 = []
    ycord1 = []
    markers = []
    colors = []
    for i in range(len(classLabels)):
        if classLabels[i] == 1.0:
            xcord1.append(dataMat[i, 0]), ycord1.append(dataMat[i, 1])
        else:
            xcord0.append(dataMat[i, 0]), ycord0.append(dataMat[i, 1])
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.scatter(xcord0, ycord0, marker='s', s=90)
    ax.scatter(xcord1, ycord1, marker='o', s=50, c='red')
    plt.title('decision stump test data')
    plt.show()


def stumpClassify(dataMatrix, dimen, threshVal, thresIneq):
    """
    通过阈值比较,对数据进行分类,分类成为-1或者+1
    :param dataMatrix:
    :param dimen:
    :param threshVal: 阈值
    :param thresIneq:
    :return:
    """
    retArray = ones((shape(dataMatrix)[0], 1))  # 首先将所有返回数组元素设置为1
    if thresIneq == 'lt':
        retArray[dataMatrix[:, dimen] <= threshVal] = -1.0
    else:
        retArray[dataMatrix[:, dimen] > threshVal] = -1.0
    return retArray


def buildStump(dataArr, classLabels, D):
    """
    遍历输入,找到数据集上的最佳单层决策树
    :param dataArr: 输入数据
    :param classLabels: 类别
    :param D: 权重向量
    :return:
    """
    dataMatrix = mat(dataArr)
    labelMat = mat(classLabels).T
    m, n = shape(dataMatrix)
    numSteps = 10.0  # 在特征所有的可能值上进行遍历
    bestStump = {}  # 存储给定权重D下所得到的最佳单层决策树的相关信息
    bestClasEst = mat(zeros((m, 1)))
    minError = inf  # 设置系统的最小错误率为无限大
    for i in range(n):  # 遍历所有的特征                       --〉对于每个特征而言
        rangeMin = dataMatrix[:, i].min()
        rangeMax = dataMatrix[:, i].max()
        stepSize = (rangeMax - rangeMin) - numSteps  # 步长   --〉得到每个特征的步长
        for j in range(-1, int(numSteps) + 1):  # 循环遍历步长
            for inequal in ['lt', 'gt']:  # lt-小于,gt-大于   --〉判断是大于还是小于
                threshVal = (rangeMin + float(j) * stepSize)
                predictedVals = stumpClassify(dataMatrix, i, threshVal, inequal)  # --〉对大于和小于两种情况都预测数据的类别
                errArr = mat(ones((m, 1)))
                errArr[predictedVals == labelMat] = 0  # --〉预测对了,误差为0,否则为1
                weightedError = D.T * errArr  # 带权重的误差
                if weightedError < minError:  # 更新bestStump中保存的最佳单层决策树的相关信息
                    minError = weightedError
                    bestClasEst = predictedVals.copy()
                    bestStump['dim'] = i
                    bestStump['thresh'] = threshVal
                    bestStump['ineq'] = inequal
    return bestStump, minError, bestClasEst


def adaBoostTrainDs(dataArr, classLabels, numIt=40):
    """
    基于单层决策树(DS)的AdaBoost训练过程
    :param dataArr: 数据集
    :param classLabels: 类别标签
    :param numIt: 迭代次数
    :return:
    """
    weakClassArr = []  # 弱分类器
    m = shape(dataArr)[0]
    D = mat(ones((m, 1)) / m)  # 初始状态下是等权的
    aggClassEst = mat(zeros((m, 1)))  # 记录每个数据点的类别估计累计值
    for i in range(numIt):
        bestStump, error, classEst = buildStump(dataArr, classLabels, D)
        alpha = float(0.5 * log((1.0 - error) / max(error, 1e-16)))  # max部分用于保证不发生除零溢出
        bestStump['alpha'] = alpha
        weakClassArr.append(bestStump)
        expon = multiply(-1 * alpha * mat(classLabels).T, classEst)
        D = multiply(D, exp(expon))
        D = D / D.sum()  # 估计新的权重向量
        aggClassEst += alpha * classEst
        aggErrors = multiply(sign(aggClassEst) != mat(classLabels).T, ones((m, 1)))
        errorRate = aggErrors.sum() / m
        print 'Total Error:', errorRate
        if errorRate == 0.0:  # 如果错误率等于0则跳出循环
            break
    return weakClassArr, aggClassEst


def adaClassify(dataToClass, classifierArr):
    """
    利用训练出的多个弱分类器进行分类
    :param dataToClass: 待分类的样本
    :param classifierArr: 弱分类器组成的数组
    :return: 返回符号(+1/-1)
    """
    dataMatrix = mat(dataToClass)
    m = shape(dataMat)[0]  # 待分类样本的个数
    aggClassEst = mat(zeros((m, 1)))
    for i in range(len(classifierArr)):  # 遍历所有弱分类器
        classEst = stumpClassify(dataMatrix, classifierArr[i]['dim'],
                                 classifierArr[i]['thresh'], classifierArr[i]['ineq'])  # 得到类别估值
        aggClassEst += classifierArr[i]['alpha'] * classEst  # 类别估值乘以该单层决策树的alpha值后累加
        print aggClassEst
    return sign(aggClassEst)


def plotROC(predStrengths, classLabels):
    """

    :param predStrengths: 分类器的预测强度
    :param classLabels:
    :return:
    """
    cur = (1.0, 1.0)  # 绘制光标的位置
    ySum = 0.0  # AUC面积
    numPosClas = sum(array(classLabels) == 1.0)  # 通过过滤的方式计算正例的数目
    yStep = 1 / float(numPosClas)  # 步长
    xStep = 1 / float(len(classLabels) - numPosClas)
    sortedIndicies = predStrengths.argsort()  # 排序索引

    fig = plt.figure()  # 下面三行构建画笔
    fig.clf()
    ax = plt.subplot(111)
    for index in sortedIndicies.tolist()[0]:  # 循环所有索引
        if classLabels[index] == 1.0:  # 每得到一个标签为1.0的类,则需要沿y轴方向下降一个步长,即降低TP值
            delX = 0
            delY = yStep
        else:
            delX = xStep
            delY = 0
            ySum += cur[1]
        ax.plot([cur[0], cur[0] - delX],
                [cur[1], cur[1] - delY],
                c='b')
        cur = (cur[0] - delX, cur[1] - delY)
    ax.plot([0, 1], [0, 1], 'b--')
    plt.xlabel('False positive rate')
    plt.ylabel('True positive rate')
    plt.title('ROC curve for AdaBoost horse colic detection system')
    ax.axis([0, 1, 0, 1])
    plt.show()
    print "the Area Under the Curve is: ", ySum * xStep


def testROC():
    datArr, labelArr = loadDataSet('./data/horseColicTraining2.txt')
    classifierArray, aggClassEst=adaBoostTrainDs(datArr,labelArr,10)
    plotROC(aggClassEst.T, labelArr)


if __name__ == '__main__':
    #dataMat, classLabels = loadSimpleData()
    #D = mat(ones((5, 1)) / 5)
    # print buildStump(dataMat, classLabels,D)
    #print adaBoostTrainDs(dataMat, classLabels, 9)

    testROC()
